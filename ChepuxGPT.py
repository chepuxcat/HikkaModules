from telethon import functions, types
from .. import loader, utils
import aiohttp
import io

@loader.tds
class OnlySqAPIMod(loader.Module):
    """–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–µ–π AI —á–µ—Ä–µ–∑ OnlySq API by @MiSidePlayer."""
    strings = {"name": "OnlySqAPI"}

    async def client_ready(self, client, db):
        self.client = client

    async def _process_ai_request(self, message, model, command):
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI –º–æ–¥–µ–ª—è–º."""
        question = utils.get_args_raw(message)
        if not question:
            reply = await message.get_reply_message()
            if reply:
                question = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å.</b>")
                return

        question = question.replace(f".{command}", "").strip()

        dict_to_send = {
            "model": model,
            "request": {"messages": [{"role": "user", "content": question}]}
        }

        await message.edit(f"<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é {model}...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dict_to_send) as response:
                    response_json = await response.json()

            answer = response_json.get("choices", [{}])[0].get("message", {}).get("content", f"–û—à–∏–±–∫–∞ API: {response_json.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.')}")
            answer = answer.replace("GPT >>", "").strip()

            await utils.answer(message, f"<b><emoji document_id=6323343426343404864>‚ùì</emoji> –í–æ–ø—Ä–æ—Å:</b> {question}\n"
                                      f"<b><emoji document_id=6323463440614557670>‚ò∫Ô∏è</emoji> –û—Ç–≤–µ—Ç:</b> {answer}\n\n"
                                      f"<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é {model}</b>")
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")

    async def _process_image_request(self, message, model, command):
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        prompt = utils.get_args_raw(message)
        if not prompt:
            reply = await message.get_reply_message()
            if reply:
                prompt = reply.raw_text
            else:
                await utils.answer(message, "<b><emoji document_id=5321288244350951776>üëé</emoji> –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b>")
                return

        prompt = prompt.replace(f".{command}", "").strip()

        dict_to_send = {
            "model": model,
            "request": {"messages": [{"role": "user", "content": prompt}]}
        }

        await message.edit(f"<b><emoji document_id=5409143295039252230>üîÑ</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é {model}...</b>")

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('https://api.onlysq.ru/ai/v2', json=dict_to_send) as response:
                    if response.status != 200:
                        await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –û—à–∏–±–∫–∞ API: {response.status}</b>")
                        return
                    image_data = await response.read()

            image = io.BytesIO(image_data)
            image.name = f"{model}_image.png"

            await message.delete()
            await self.client.send_file(
                message.to_id,
                image,
                caption=f"<b><emoji document_id=6323343426343404864>üñºÔ∏è</emoji> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {prompt}\n"
                        f"<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é {model}</b>"
            )
        except Exception as e:
            await utils.answer(message, f"<b><emoji document_id=5314591660192046611>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {e}")

    async def gptcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gpt <–≤–æ–ø—Ä–æ—Å> –¥–ª—è gpt-4o-mini."""
        await self._process_ai_request(message, "gpt-4o-mini", "gpt")

    async def searchgptcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .searchgpt <–≤–æ–ø—Ä–æ—Å> –¥–ª—è searchgpt."""
        await self._process_ai_request(message, "searchgpt", "searchgpt")

    async def claude3cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .claude3 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è claude-3-haiku."""
        await self._process_ai_request(message, "claude-3-haiku", "claude3")

    async def gpt4cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gpt4 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è gpt-4."""
        await self._process_ai_request(message, "gpt-4", "gpt4")

    async def gpt3cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gpt3 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è gpt-3.5-turbo."""
        await self._process_ai_request(message, "gpt-3.5-turbo", "gpt3")

    async def llama3cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .llama3 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è llama-3.1."""
        await self._process_ai_request(message, "llama-3.1", "llama3")

    async def qwencmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .qwen <–≤–æ–ø—Ä–æ—Å> –¥–ª—è qwen."""
        await self._process_ai_request(message, "qwen", "qwen")

    async def kandinskycmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .kandinsky <–æ–ø–∏—Å–∞–Ω–∏–µ> –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å kandinsky."""
        await self._process_image_request(message, "kandinsky", "kandinsky")

    async def fluxcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .flux <–æ–ø–∏—Å–∞–Ω–∏–µ> –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å flux."""
        await self._process_image_request(message, "flux", "flux")

    async def claude35cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .claude35 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è claude-3.5-sonnet."""
        await self._process_ai_request(message, "claude-3.5-sonnet", "claude35")

    async def gpt4ocmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gpt4o <–≤–æ–ø—Ä–æ—Å> –¥–ª—è gpt-4o."""
        await self._process_ai_request(message, "gpt-4o", "gpt4o")

    async def gpt4turbocmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gpt4turbo <–≤–æ–ø—Ä–æ—Å> –¥–ª—è gpt-4-turbo."""
        await self._process_ai_request(message, "gpt-4-turbo", "gpt4turbo")

    async def llama33cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .llama33 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è llama-3.3."""
        await self._process_ai_request(message, "llama-3.3", "llama33")

    async def deepseekv3cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .deepseekv3 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è deepseek-v3."""
        await self._process_ai_request(message, "deepseek-v3", "deepseekv3")

    async def qwen25cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .qwen25 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è qwen-2.5-32b."""
        await self._process_ai_request(message, "qwen-2.5-32b", "qwen25")

    async def mistralsmallcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .mistralsmall <–≤–æ–ø—Ä–æ—Å> –¥–ª—è mistral-small-3.1."""
        await self._process_ai_request(message, "mistral-small-3.1", "mistralsmall")

    async def commandcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .command <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command."""
        await self._process_ai_request(message, "command", "command")

    async def commandlightcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandlight <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-light."""
        await self._process_ai_request(message, "command-light", "commandlight")

    async def commandnightlycmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandnightly <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-nightly."""
        await self._process_ai_request(message, "command-nightly", "commandnightly")

    async def commandlightnightlycmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandlightnightly <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-light-nightly."""
        await self._process_ai_request(message, "command-light-nightly", "commandlightnightly")

    async def commandr03cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandr03 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-r-03-2024."""
        await self._process_ai_request(message, "command-r-03-2024", "commandr03")

    async def commandr08cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandr08 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-r-08-2024."""
        await self._process_ai_request(message, "command-r-08-2024", "commandr08")

    async def commandrcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandr <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-r."""
        await self._process_ai_request(message, "command-r", "commandr")

    async def commandrpluscmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandrplus <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-r-plus."""
        await self._process_ai_request(message, "command-r-plus", "commandrplus")

    async def commandrplus04cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandrplus04 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-r-plus-04-2024."""
        await self._process_ai_request(message, "command-r-plus-04-2024", "commandrplus04")

    async def commandr7bcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commandr7b <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-r7b-12-2024."""
        await self._process_ai_request(message, "command-r7b-12-2024", "commandr7b")

    async def commandacmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .commanda <–≤–æ–ø—Ä–æ—Å> –¥–ª—è command-a-03-2025."""
        await self._process_ai_request(message, "command-a-03-2025", "commanda")

    async def c4aiayacmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .c4aiaya <–≤–æ–ø—Ä–æ—Å> –¥–ª—è c4ai-aya-expanse-32b."""
        await self._process_ai_request(message, "c4ai-aya-expanse-32b", "c4aiaya")

    async def gemma34bcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gemma34b <–≤–æ–ø—Ä–æ—Å> –¥–ª—è gemma-3-4b-it."""
        await self._process_ai_request(message, "gemma-3-4b-it", "gemma34b")

    async def gemini15flashcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gemini15flash <–≤–æ–ø—Ä–æ—Å> –¥–ª—è gemini-1.5-flash."""
        await self._process_ai_request(message, "gemini-1.5-flash", "gemini15flash")

    async def gemini15procmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .gemini15pro <–≤–æ–ø—Ä–æ—Å> –¥–ª—è gemini-1.5-pro."""
        await self._process_ai_request(message, "gemini-1.5-pro", "gemini15pro")

    async def deepseekr1cmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .deepseekr1 <–≤–æ–ø—Ä–æ—Å> –¥–ª—è deepseek-r1."""
        await self._process_ai_request(message, "deepseek-r1", "deepseekr1")

    async def o3minicmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .o3mini <–≤–æ–ø—Ä–æ—Å> –¥–ª—è o3-mini."""
        await self._process_ai_request(message, "o3-mini", "o3mini")

    async def evilcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .evil <–≤–æ–ø—Ä–æ—Å> –¥–ª—è evil."""
        await self._process_ai_request(message, "evil", "evil")

    async def mistralcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .mistral <–≤–æ–ø—Ä–æ—Å> –¥–ª—è mistral."""
        await self._process_ai_request(message, "mistral", "mistral")
